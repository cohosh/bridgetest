#!/usr/bin/env python2

import errno
import logging
import os
import re
import shutil
import subprocess
import tempfile
import time
import sys

import stem.process

BRIDGE_LINES = (
)

START_TOR_TIMEOUT = 3*60
CIRCUIT_BUILD_TIMEOUT = 60
OBFS4PROXY_PATH = "/usr/bin/obfs4proxy"
SNOWFLAKE_PATH = "/usr/bin/snowflake"

def makedirs(path):
    try:
        return os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise

def get_address_from_bridge_line(bridge_line):
    host, port = bridge_line.split()[1].split(":", 1)
    port = int(port)
    return (host, port)

def start_tcpdump(basename):
    # need to look at capture file to see which snowflake we got
    bpf = "udp"
    # http://packetlife.net/blog/2010/mar/19/sniffing-wireshark-non-root-user/
    # groupadd tcpdump
    # usermod -a -G tcpdump user
    # chgrp tcpdump /usr/sbin/tcpdump
    # setcap cap_net_raw,cap_net_admin=eip /usr/sbin/tcpdump
    p = subprocess.Popen(["/usr/sbin/tcpdump", "-i", "tun0", "-U", "-B", "4096", "-c", "100", "-w", basename + ".pcap", bpf],
        stdout=open(basename + ".pcap", "w"),
        stderr=open(basename + ".tcpdump.err", "w"))
    return p

def download_file(socks_port):
    logging.info("Attempting to download large file")
    
    try:
        start = time.time()
        # Download a ~1MB file
        subprocess.check_call(["/usr/bin/torsocks", "-P", str(socks_port), "wget", "-O", "/dev/null", "https://mirror.csclub.uwaterloo.ca/ubuntu/dists/xenial/main/binary-amd64/Packages.xz"])
        stop = time.time()
        download_time = stop - start
    except subprocess.CalledProcessError as e:
        logging.info("failed to download file: %s", e)
        download_time = -1

    finally:
        return download_time


def start_tor(tor_config):
    assert "DataDirectory" in tor_config

    config = {
        "SOCKSPort": "auto",
        "ControlPort": "auto",
        "CookieAuthentication": "1",
        "LearnCircuitBuildTimeout": "0",
        "CircuitBuildTimeout": str(CIRCUIT_BUILD_TIMEOUT),
        "FetchHidServDescriptors": "0",
        "ClientTransportPlugin": "obfs4 exec %s" % OBFS4PROXY_PATH,
        "LogTimeGranularity": "1",
        "Log": "notice stdout",
    }
    config.update(tor_config)

    class Ports(object):
        socks = None
        control = None
    ports = Ports()
    socks_re = re.compile(r'\bSocks listener listening on port ([0-9]+)\.')
    control_re = re.compile(r'\bControl listener listening on port ([0-9]+)\.')
    def init_msg_handler(line):
        logging.info("tor: %s" % line.encode("unicode_escape"))
        m = socks_re.search(line)
        if m is not None:
            assert ports.socks is None
            ports.socks = int(m.group(1))
        m = control_re.search(line)
        if m is not None:
            assert ports.control is None
            ports.control = int(m.group(1))

    logging.info("starting tor with configuration %r" % config)

    proc = stem.process.launch_tor_with_config(
        config,
        timeout=START_TOR_TIMEOUT,
        take_ownership=True,
        init_msg_handler=init_msg_handler,
    )

    assert ports.socks is not None
    assert ports.control is not None

    return proc, ports.socks, ports.control

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s.%(msecs)03d %(message)s",
    datefmt="%Y-%m-%d %H:%M:%S",
)
logging.Formatter.converter = time.gmtime

# Set timezone to be inherited by tor processes.
os.environ["TZ"] = "UTC"
time.tzset()

logging.info("starting")

#Now do a set of probes of snowflake proxies
for x in range(0, 100):
    nickname = "snowflake-probe-%(num)d" % {"num": x}
    datadir = tempfile.mkdtemp(prefix="datadir.", dir=".")
    logging.info("created temporary DataDirectory %r", datadir)
    tcpdump_proc = None
    try:
        logging.info("starting tcpdump for bridge %r" % nickname)
        try:
            tcpdump_proc = start_tcpdump(nickname)
        except OSError as e:
            logging.info("failed to start tcpdump, stopping snowflake probe: %s", e)
            #these tests break if we can't find the proxy ip address
            break
	logging.info("starting tor for bridge %r" % nickname)
	tor_config = {
		"DataDirectory": datadir, 
		"Log": "notice file %s" % os.path.join(".", "%s.log" % nickname),
		"UseBridges": "1",
		"ClientTransportPlugin": "snowflake exec %s \
					-url https://snowflake-broker.azureedge.net/ \
					-front ajax.aspnetcdn.com \
					-ice stun:stun.l.google.com:19302" % SNOWFLAKE_PATH,
		"Bridge": "snowflake 0.0.3.0:1",
		}
	try:
	    tor_proc, socks_port, _ = start_tor(tor_config)
            download_file(socks_port)
            tor_proc.terminate()
            tor_proc.wait()
	except OSError as err:
	    logging.info("failed to start tor: %s" % err)
            continue

        finally:
            output = subprocess.Popen(["/usr/bin/tshark", "-q", "-Xlua_script:../../../proxy-ip.lua", "-r",  "%s.pcap" % nickname],
                                            stdout=subprocess.PIPE).communicate()[0]
            proxyip = output.strip()
            logging.info("Probed snowflake proxy %s" % proxyip)
    finally:
	#Extract the proxy ip
        logging.info("deleting temporary DataDirectory %r", datadir)
        shutil.rmtree(datadir)
        if tcpdump_proc is not None:
            tcpdump_proc.terminate()

